<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GUI.Client</name>
    </assembly>
    <members>
        <member name="T:CS3500.NetworkLibrary.NetworkConnection">
            <summary>
            Wraps the StreamReader, StreamWriter, and TcpClient together to provide
            a unified interface for network actions.
            </summary>
        </member>
        <member name="F:CS3500.NetworkLibrary.NetworkConnection._tcpClient">
            <summary>
            Represents the underlying TCP client used for the connection.
            </summary>
        </member>
        <member name="F:CS3500.NetworkLibrary.NetworkConnection._reader">
            <summary>
            The reader for incoming messages.
            </summary>
        </member>
        <member name="F:CS3500.NetworkLibrary.NetworkConnection._writer">
            <summary>
            The writer for outgoing messages.
            </summary>
        </member>
        <member name="M:CS3500.NetworkLibrary.NetworkConnection.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:CS3500.NetworkLibrary.NetworkConnection"/> class
            with an existing TCP client.
            </summary>
            <param name="tcpClient">An already connected TcpClient.</param>
        </member>
        <member name="M:CS3500.NetworkLibrary.NetworkConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CS3500.NetworkLibrary.NetworkConnection"/> class.
            Creates a new, unconnected TcpClient.
            </summary>
        </member>
        <member name="P:CS3500.NetworkLibrary.NetworkConnection.IsConnected">
            <summary>
            Gets a value indicating whether the connection is currently active.
            </summary>
        </member>
        <member name="M:CS3500.NetworkLibrary.NetworkConnection.Connect(System.String,System.Int32)">
            <summary>
            Connects to a remote host and port.
            </summary>
            <param name="host">The remote host's URL or IP address.</param>
            <param name="port">The port number to connect to.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if already connected.</exception>
        </member>
        <member name="M:CS3500.NetworkLibrary.NetworkConnection.Send(System.String)">
            <summary>
            Sends a message to the remote endpoint. Appends a newline character to
            treat it as a complete message.
            </summary>
            <param name="message">The message to send.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if not connected.</exception>
        </member>
        <member name="M:CS3500.NetworkLibrary.NetworkConnection.ReadLine">
            <summary>
            Reads a message from the remote endpoint up to the first newline.
            </summary>
            <returns>The message received from the remote endpoint.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if not connected.</exception>
            <exception cref="T:System.IO.IOException">Thrown if the connection is closed by the remote host.</exception>
        </member>
        <member name="M:CS3500.NetworkLibrary.NetworkConnection.Disconnect">
            <summary>
            Disconnects the connection and disposes of the resources.
            </summary>
        </member>
        <member name="M:CS3500.NetworkLibrary.NetworkConnection.Dispose">
            <summary>
            Releases all resources used by the NetworkConnection.
            </summary>
        </member>
        <member name="T:CS3500.NetworkController.NetworkController">
            <summary>
            Handles the network communication with the Snake server and updates the game state accordingly.
            </summary>
        </member>
        <member name="F:CS3500.NetworkController.NetworkController.networkConnection">
            <summary>
            Manages the connection to the server.
            </summary>
        </member>
        <member name="P:CS3500.NetworkController.NetworkController.IsConnected">
            <summary>
            Indicates whether the client is currently connected to the server.
            </summary>
        </member>
        <member name="P:CS3500.NetworkController.NetworkController.OnError">
            <summary>
            Invoked when an error occurs during network communication.
            </summary>
        </member>
        <member name="P:CS3500.NetworkController.NetworkController.OnStatusUpdate">
            <summary>
            Invoked to notify the view of status changes.
            </summary>
        </member>
        <member name="P:CS3500.NetworkController.NetworkController.OnDisconnected">
            <summary>
            Invoked when the client disconnects from the server.
            </summary>
        </member>
        <member name="P:CS3500.NetworkController.NetworkController.OnPlayerUpdate">
            <summary>
            Invoked when a player's data is updated.
            </summary>
        </member>
        <member name="P:CS3500.NetworkController.NetworkController.OnPowerupUpdate">
            <summary>
            Invoked when a powerup's data is updated.
            </summary>
        </member>
        <member name="F:CS3500.NetworkController.NetworkController.serverAddress">
            <summary>
            The server's IP address or hostname.
            </summary>
        </member>
        <member name="F:CS3500.NetworkController.NetworkController.port">
            <summary>
            The port number for connecting to the server.
            </summary>
        </member>
        <member name="P:CS3500.NetworkController.NetworkController.TheWorld">
            <summary>
            Represents the game world, including players, walls, and powerups.
            </summary>
        </member>
        <member name="P:CS3500.NetworkController.NetworkController.playerID">
            <summary>
            The unique player ID assigned by the server.
            </summary>
        </member>
        <member name="F:CS3500.NetworkController.NetworkController.worldSize">
            <summary>
            The size of the game world (width and height).
            </summary>
        </member>
        <member name="F:CS3500.NetworkController.NetworkController.receivedInitialData">
            <summary>
            Indicates whether the initial data has been received from the server.
            </summary>
        </member>
        <member name="F:CS3500.NetworkController.NetworkController.playerIDReceived">
            <summary>
            Indicates whether the player ID has been received from the server.
            </summary>
        </member>
        <member name="F:CS3500.NetworkController.NetworkController.networkLock">
            <summary>
            Lock object to synchronize access
            </summary>
        </member>
        <member name="M:CS3500.NetworkController.NetworkController.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the NetworkController class with the specified server address and port.
            </summary>
            <param name="serverAddress">The server's IP address or hostname.</param>
            <param name="port">The port number for the connection.</param>
        </member>
        <member name="M:CS3500.NetworkController.NetworkController.ConnectToServer(System.String)">
            <summary>
            Connects to the server and sends the player's name.
            </summary>
            <param name="playerName">The name of the player.</param>
        </member>
        <member name="M:CS3500.NetworkController.NetworkController.DisconnectFromServer">
            <summary>
            Disconnects from the server and cleans up resources.
            </summary>
        </member>
        <member name="M:CS3500.NetworkController.NetworkController.StartReceivingData">
            <summary>
            Starts receiving data from the server asynchronously.
            </summary>
        </member>
        <member name="M:CS3500.NetworkController.NetworkController.ProcessServerData(System.String)">
            <summary>
            Processes data received from the server.
            </summary>
            <param name="data">The data received from the server.</param>
        </member>
        <member name="M:CS3500.NetworkController.NetworkController.ProcessInitialData(System.String)">
            <summary>
            Processes initial data received from the server (e.g., player ID and world size).
            </summary>
            <param name="data">The initial data string.</param>
        </member>
        <member name="M:CS3500.NetworkController.NetworkController.ProcessSnakeData(System.String)">
            <summary>
            Processes snake data received from the server.
            </summary>
            <param name="data">The JSON string representing a snake.</param>
        </member>
        <member name="M:CS3500.NetworkController.NetworkController.ProcessPowerupData(System.String)">
            <summary>
            Processes powerup data received from the server.
            </summary>
            <param name="data">The JSON string representing a powerup.</param>
        </member>
        <member name="M:CS3500.NetworkController.NetworkController.ProcessWallData(System.String)">
            <summary>
            Processes wall data received from the server.
            </summary>
            <param name="data">The JSON string representing a wall.</param>
        </member>
        <member name="M:CS3500.NetworkController.NetworkController.SendMoveCommand(System.String)">
            <summary>
            Sends a move command to the server indicating the player's direction.
            </summary>
            <param name="direction">The desired direction ("up", "down", "left", "right").</param>
        </member>
        <member name="F:CS3500.NetworkController.NetworkController.connectionString">
            <summary>
            The connection string.
            </summary>
        </member>
        <member name="T:CS3500.Models.Player">
            <summary>
            One of the types of objects in the game (part of the Model of MVC)
            </summary>
        </member>
        <member name="P:CS3500.Models.Player.ID">
            <summary>
            The unique ID of the snake/player (from the "snake" field in JSON).
            </summary>
        </member>
        <member name="P:CS3500.Models.Player.Name">
            <summary>
            The player's name.
            </summary>
        </member>
        <member name="P:CS3500.Models.Player.Body">
            <summary>
            The segments of the snake's body.
            The first element represents the head of the snake.
            </summary>
        </member>
        <member name="P:CS3500.Models.Player.Direction">
            <summary>
            The direction of the snake's movement.
            </summary>
        </member>
        <member name="P:CS3500.Models.Player.Score">
            <summary>
            The player's score.
            </summary>
        </member>
        <member name="P:CS3500.Models.Player.Died">
            <summary>
            Indicates if the snake died in the current frame.
            </summary>
        </member>
        <member name="P:CS3500.Models.Player.Alive">
            <summary>
            Indicates if the snake is currently alive.
            </summary>
        </member>
        <member name="P:CS3500.Models.Player.Disconnected">
            <summary>
            Indicates if the player has disconnected.
            </summary>
        </member>
        <member name="P:CS3500.Models.Player.JustJoined">
            <summary>
            Indicates if the player has just joined.
            </summary>
        </member>
        <member name="M:CS3500.Models.Player.#ctor">
            <summary>
            Default constructor required for JSON deserialization.
            </summary>
        </member>
        <member name="T:CS3500.Models.Point2D">
            <summary>
            Represents a point or vector in 2D space.
            </summary>
        </member>
        <member name="P:CS3500.Models.Point2D.X">
            <summary>
            The X-coordinate of the point in 2D space.
            </summary>
        </member>
        <member name="P:CS3500.Models.Point2D.Y">
            <summary>
            The Y-coordinate of the point in 2D space.
            </summary>
        </member>
        <member name="M:CS3500.Models.Point2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CS3500.Models.Point2D"/> class.
            This default constructor is required for JSON serialization/deserialization.
            </summary>
        </member>
        <member name="M:CS3500.Models.Point2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CS3500.Models.Point2D"/> class with the specified coordinates.
            </summary>
            <param name="x">The X-coordinate of the point.</param>
            <param name="y">The Y-coordinate of the point.</param>
        </member>
        <member name="T:CS3500.Models.Powerup">
            <summary>
            Represents a powerup object in the game. 
            Powerups can be collected by players to affect gameplay.
            </summary>
        </member>
        <member name="P:CS3500.Models.Powerup.ID">
            <summary>
            This powerup's unique ID
            </summary>
        </member>
        <member name="P:CS3500.Models.Powerup.Position">
            <summary>
            This powerup's position
            </summary>
        </member>
        <member name="P:CS3500.Models.Powerup.Died">
            <summary>
            Indicates whether this powerup has been collected and is no longer active.
            </summary>
        </member>
        <member name="M:CS3500.Models.Powerup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CS3500.Models.Powerup"/> class.
            This parameterless constructor is required for JSON serialization/deserialization.
            </summary>
        </member>
        <member name="M:CS3500.Models.Powerup.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CS3500.Models.Powerup"/> class with the specified ID and position.
            </summary>
            <param name="id">The unique identifier for the powerup.</param>
            <param name="x">The X-coordinate of the powerup's position.</param>
            <param name="y">The Y-coordinate of the powerup's position.</param>
        </member>
        <member name="T:CS3500.Models.Wall">
            <summary>
            Represents a wall object in the game.
            Walls are obstacles that players cannot pass through.
            </summary>
        </member>
        <member name="P:CS3500.Models.Wall.ID">
            <summary>
            The unique identifier for this wall.
            </summary>
        </member>
        <member name="P:CS3500.Models.Wall.Point1">
            <summary>
            The starting point of this wall in the game world.
            </summary>
        </member>
        <member name="P:CS3500.Models.Wall.Point2">
            <summary>
            The ending point of this wall in the game world.
            </summary>
        </member>
        <member name="M:CS3500.Models.Wall.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CS3500.Models.Wall"/> class.
            This parameterless constructor is required for JSON serialization/deserialization.
            </summary>
        </member>
        <member name="M:CS3500.Models.Wall.#ctor(System.Int32,CS3500.Models.Point2D,CS3500.Models.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:CS3500.Models.Wall"/> class with the specified ID and endpoints.
            </summary>
            <param name="id">The unique identifier for the wall.</param>
            <param name="point1">The starting point of the wall.</param>
            <param name="point2">The ending point of the wall.</param>
        </member>
        <member name="T:CS3500.Models.World">
            <summary>
            Represents the game world, containing all objects in the game.
            Acts as the Model in the MVC architecture.
            </summary>
        </member>
        <member name="P:CS3500.Models.World.Players">
            <summary>
            A dictionary of players in the game, keyed by their unique IDs.
            </summary>
        </member>
        <member name="P:CS3500.Models.World.Powerups">
            <summary>
            A dictionary of powerups in the game, keyed by their unique IDs.
            </summary>
        </member>
        <member name="P:CS3500.Models.World.Walls">
            <summary>
            A dictionary of walls in the game, keyed by their unique IDs.
            </summary>
        </member>
        <member name="P:CS3500.Models.World.Size">
            <summary>
            The size of one side of the square game world.
            </summary>
        </member>
        <member name="M:CS3500.Models.World.#ctor">
            <summary>
            Default constructor required for JSON serialization/deserialization.
            Initializes all dictionaries to empty and sets a default size.
            </summary>
        </member>
        <member name="M:CS3500.Models.World.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CS3500.Models.World"/> class with the specified size.
            </summary>
            <param name="_size">The size of one side of the square world.</param>
        </member>
        <member name="M:CS3500.Models.World.#ctor(CS3500.Models.World)">
            <summary>
            Create a copy of the world
            </summary>
        </member>
        <member name="M:CS3500.Models.World.UpdatePlayer(CS3500.Models.Player)">
            <summary>
            Updates the data for an existing player or adds a new player to the world.
            </summary>
            <param name="player">The player to update or add.</param>
        </member>
        <member name="M:CS3500.Models.World.UpdatePowerup(CS3500.Models.Powerup)">
            <summary>
            Updates the data for an existing powerup or adds a new powerup to the world.
            </summary>
            <param name="powerup">The powerup to update or add.</param>
        </member>
        <member name="M:CS3500.Models.World.RemovePlayer(System.Int32)">
            <summary>
            Removes a player from the world by their ID.
            </summary>
            <param name="playerID">The ID of the player to remove.</param>
        </member>
        <member name="M:CS3500.Models.World.RemovePowerup(System.Int32)">
            <summary>
            Removes a powerup from the world by its ID.
            </summary>
            <param name="powerupID">The ID of the powerup to remove.</param>
        </member>
        <member name="M:CS3500.Models.World.AddWall(CS3500.Models.Wall)">
            <summary>
            Adds a wall to the world if it is not already present.
            </summary>
            <param name="wall">The wall to add.</param>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.canvasReference">
            <summary>
            Reference to the canvas element for rendering the game.
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.context">
            <summary>
            2D context for drawing on the canvas.
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.jsModule">
            <summary>
            JavaScript module reference for additional functionality.
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.serverAddress">
            <summary>
            IP address of the game server. Default value is "localhost."
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.portNumber">
            <summary>
            Port number for connecting to the server. Default value is 11000.
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.playerName">
            <summary>
            Name of the player to identify them on the server.
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.statusMessage">
            <summary>
            Status message to provide feedback to the user (e.g., connection status).
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.networkController">
            <summary>
            The network controller responsible for communicating with the game server.
            </summary>
        </member>
        <member name="P:GUI.Client.Pages.SnakeGUI.TheWorld">
            <summary>
            Provides easy access to TheWorld from networkController.
            Returns null if networkController or TheWorld is null.
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.drawingLock">
            <summary>
            Lock object to prevent race condition when drawing
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.backgroundImage">
            <summary>
            C# reference to the html element for the background image
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.wallImage">
            <summary>
            Reference to the wall image element.
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.powerupImage">
            <summary>
            Reference to the powerup image element.
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.ViewWidth">
            <summary>
            Width of the game view in pixels.
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.ViewHeight">
            <summary>
            Height of the game view in pixels.
            </summary>
        </member>
        <member name="F:GUI.Client.Pages.SnakeGUI.playerColors">
            <summary>
            Array of colors to represent players in the game.
            </summary>
        </member>
        <member name="M:GUI.Client.Pages.SnakeGUI.ConnectButton">
            <summary>
            Handles the Connect button click to initiate a connection to the game server.
            </summary>
        </member>
        <member name="M:GUI.Client.Pages.SnakeGUI.DisconnectButton">
            <summary>
            Handles the Disconnect button click to stop communication with the game server.
            </summary>
        </member>
        <member name="M:GUI.Client.Pages.SnakeGUI.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Called after the component has been rendered to initialize the JavaScript module and start the game loop.
            </summary>
            <param name="firstRender">Indicates if this is the first time the component has been rendered.</param>
        </member>
        <member name="M:GUI.Client.Pages.SnakeGUI.GameLoop">
            <summary>
            Main game loop responsible for continuously updating and rendering the game state.
            </summary>
        </member>
        <member name="M:GUI.Client.Pages.SnakeGUI.ClearCanvasLoop">
            <summary>
            Clears the canvas over a specified duration to reset the game view.
            </summary>
        </member>
        <member name="M:GUI.Client.Pages.SnakeGUI.ClearCanvas">
            <summary>
            Clears the entire canvas.
            </summary>
        </member>
        <member name="M:GUI.Client.Pages.SnakeGUI.DrawFrame">
            <summary>
            Draws a single frame of the game, including players, powerups, walls, and the background.
            </summary>
        </member>
        <member name="M:GUI.Client.Pages.SnakeGUI.DrawSnake(CS3500.Models.Player)">
            <summary>
            Draws a snake on the canvas based on its current state.
            </summary>
            <param name="player">The player whose snake to draw.</param>
        </member>
        <member name="M:GUI.Client.Pages.SnakeGUI.DrawPowerup(CS3500.Models.Powerup)">
            <summary>
            Draws a powerup on the canvas.
            </summary>
            <param name="powerup">The powerup to draw.</param>
        </member>
        <member name="M:GUI.Client.Pages.SnakeGUI.DrawWall(CS3500.Models.Wall)">
            <summary>
            Draws a wall on the canvas.
            </summary>
            <param name="wall">The wall to draw.</param>
        </member>
        <member name="M:GUI.Client.Pages.SnakeGUI.HandleKeyPress(System.String)">
            <summary>
            Handles key press events and sends the corresponding move command to the server.
            </summary>
            <param name="key">The key that was pressed.</param>
        </member>
    </members>
</doc>
