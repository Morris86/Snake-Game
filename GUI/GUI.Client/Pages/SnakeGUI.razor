@page "/snake"
@rendermode InteractiveServer
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Numerics
@using System.Diagnostics
@using System.Text.Json
@using CS3500.NetworkController
@using CS3500.Models
@inject IJSRuntime JsRuntime;

<PageTitle> Snake </PageTitle>

<!-- Snake Game Connection -->
<div style="padding: 10px; background-color: #f3f3f3;">
    <label>Server Address:</label>
    <input @bind="serverAddress" placeholder="Enter Server IP" style="margin-right: 5px;" />

    <label>Port Number:</label>
    <input @bind="portNumber" type="number" placeholder="Enter Port" style="margin-right: 5px;" />

    <label>Player Name:</label>
    <input @bind="playerName" placeholder="Enter Player Name" style="margin-right: 5px;" />

    <button @onclick="ConnectToServer">Connect</button>
    <button @onclick="DisconnectFromServer" style="margin-left: 5px;">Disconnect</button>

    <p>@statusMessage</p>
</div>

<!-- Snake Canvas with Top Margin -->
<div id="snakeCanvas" style="margin-top: 20px;">
    <BECanvas Width="1000" Height="1000" @ref="canvasReference"></BECanvas>
</div>

<p>@statusMessage</p>

@code
{

    private BECanvasComponent canvasReference = null!;
    private Canvas2DContext context = null!;
    private IJSObjectReference jsModule = null!;

    private string serverAddress = "localhost"; // Default IP
    private int portNumber = 11000; // Default Port
    private string playerName = "";
    private string statusMessage = "";
    private NetworkController networkController;
    private World TheWorld;


    private void ConnectToServer()
    {
        if (string.IsNullOrWhiteSpace(playerName))
        {
            statusMessage = "Player name is required!";
            return;
        }
        try
        {
            // Initialize networkController only when connecting
            networkController = new NetworkController(serverAddress, portNumber);
            networkController.OnError = errorMessage => statusMessage = errorMessage;

            networkController.SendPlayerName(playerName); // Send the player's name upon connecting
            statusMessage = $"Connected to {serverAddress}:{portNumber} as {playerName}.";

            // // Define actions for updating game state when data is received
            // networkController.OnPlayerUpdate = player => TheWorld.UpdatePlayer(player);
            // networkController.OnPowerupUpdate = powerup => TheWorld.UpdatePowerup(powerup);
            // networkController.SendPlayerName(playerName); // Send the player's name upon connecting
            // statusMessage = $"Connected to {serverAddress}:{portNumber} as {playerName}.";
        }
        catch (Exception ex)
        {
            statusMessage = $"Failed to connect: {ex.Message}";
        }
    }

    private void DisconnectFromServer()
    {
        networkController.Close();
    }


    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>( "import", "./Pages/SnakeGUI.razor.js" );
            context = await canvasReference.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>( "initRenderJS", DotNetObjectReference.Create( this ) );           

            // TODO: Start the game loop
            GameLoop();

            // in the meantime, draw something to initialize the canvas
            // you may want to remove this after you are drawing something
            //await context.SetFillStyleAsync( "lightblue" );
            //await context.FillRectAsync( 0, 0, 1000, 1000 );
        }
    }

    private async void GameLoop()
    {
        while (true)
        {
            //Console.WriteLine("Drawing frames");
            await DrawFrame();
            await Task.Delay(20); // 50 FPS
        }
    }

    private async Task DrawFrame()
    {
        // Exit early if TheWorld is not initialized yet (e.g., before connecting)
        if (TheWorld == null)
        {
            //Console.WriteLine("TheWorld is Null");
            return;
        }

        await context.BeginBatchAsync();

        // Clear the canvas for redrawing
        await context.SetFillStyleAsync("lightblue");
        await context.FillRectAsync(0, 0, 1000, 1000);

        // Draw each player
        foreach (var player in TheWorld.Players.Values)
        {
            await DrawSnake(player);
        }

        // Draw each powerup
        foreach (var powerup in TheWorld.Powerups.Values)
        {
            await DrawPowerup(powerup);
        }

        await context.EndBatchAsync();
    }


    private async Task DrawSnake(Player player)
    {
        await context.SetStrokeStyleAsync("green");
        await context.BeginPathAsync();

        if (player.Body.Count > 0)
        {
            await context.MoveToAsync(player.Body[0].X, player.Body[0].Y);
            foreach (var segment in player.Body)
            {
                await context.LineToAsync(segment.X, segment.Y);
            }
        }
        await context.StrokeAsync();
    }

    private async Task DrawPowerup(Powerup powerup)
    {
        await context.SetFillStyleAsync("red");
        await context.FillRectAsync(powerup.Position.X, powerup.Position.Y, 16, 16);
    }



    [JSInvokable]
    public void HandleKeyPress(string key)
    {
        if (networkController == null)
        {
            Debug.WriteLine("Error: networkController is not initialized.");
            statusMessage = "Error: Not connected to server.";
            return;
        }

        string direction = key switch
        {
            "w" => "up",
            "s" => "down",
            "a" => "left",
            "d" => "right",
            _ => "none"
        };

        if (direction != "none")
        {
            networkController.SendMoveCommand(direction);
        }

        Debug.WriteLine("key pressed: " + key);
    }

}

