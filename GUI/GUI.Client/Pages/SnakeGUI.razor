<!-- Author: Morris Lu, Anurup Kumar Fall 2024 -->

@page "/snake"
@rendermode InteractiveServer
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Numerics
@using System.Diagnostics
@using System.Text.Json
@using CS3500.NetworkController
@using CS3500.Models
@inject IJSRuntime JsRuntime;

<PageTitle> Snake </PageTitle>
<img @ref="backgroundImage" id="bgImage" src="images/Background.png" alt="image" style="display:none;" />
<img @ref="wallImage" id="wallImage" src="images/Wall.png" alt="wall" style="display:none;" />
<img @ref="powerupImage" id="powerupImage" src="images/Powerup.png" alt="powerup" style="display:none;" />
<!-- Snake Game Connection -->
<div style="padding: 10px; background-color: #f3f3f3;">
    <label>Server Address:</label>
    <input @bind="serverAddress" placeholder="Enter Server IP" style="margin-right: 5px;" />

    <label>Port Number:</label>
    <input @bind="portNumber" type="number" placeholder="Enter Port" style="margin-right: 5px;" />

    <label>Player Name:</label>
    <input @bind="playerName" placeholder="Enter Player Name" style="margin-right: 5px;" />

    <button @onclick="ConnectButton">Connect</button>
    <button @onclick="DisconnectButton" style="margin-left: 5px;">Disconnect</button>

    <p>@statusMessage</p>
</div>

<!-- Snake Canvas with Top Margin -->
<div id="snakeCanvas" style="margin-top: 20px;">
    <BECanvas Width="1000" Height="1000" @ref="canvasReference"></BECanvas>
</div>

@code
{
    /// <summary>
    /// Reference to the canvas element for rendering the game.
    /// </summary>
    private BECanvasComponent canvasReference = null!;

    /// <summary>
    /// 2D context for drawing on the canvas.
    /// </summary>
    private Canvas2DContext context = null!;

    /// <summary>
    /// JavaScript module reference for additional functionality.
    /// </summary>
    private IJSObjectReference jsModule = null!;

    /// <summary>
    /// IP address of the game server. Default value is "localhost."
    /// </summary>
    private string serverAddress = "localhost";

    /// <summary>
    /// Port number for connecting to the server. Default value is 11000.
    /// </summary>
    private int portNumber = 11000;

    /// <summary>
    /// Name of the player to identify them on the server.
    /// </summary>
    private string playerName = "";

    /// <summary>
    /// Status message to provide feedback to the user (e.g., connection status).
    /// </summary>
    private string statusMessage = "";

    /// <summary>
    /// The network controller responsible for communicating with the game server.
    /// </summary>
    private NetworkController? networkController;

    /// <summary>
    /// Provides easy access to TheWorld from networkController.
    /// Returns null if networkController or TheWorld is null.
    /// </summary>
    private World? TheWorld => networkController?.TheWorld;

    /// <summary>
    /// Lock object to prevent race condition when drawing
    /// </summary>
    private readonly object drawingLock = new object();

    /// <summary>
    /// C# reference to the html element for the background image
    /// </summary>
    private ElementReference backgroundImage;

    /// <summary>
    /// Reference to the wall image element.
    /// </summary>
    private ElementReference wallImage;

    /// <summary>
    /// Reference to the powerup image element.
    /// </summary>
    private ElementReference powerupImage;

    /// <summary>
    /// Width of the game view in pixels.
    /// </summary>
    private const int ViewWidth = 1000;

    /// <summary>
    /// Height of the game view in pixels.
    /// </summary>
    private const int ViewHeight = 1000;

    /// <summary>
    /// Array of colors to represent players in the game.
    /// </summary>
    private readonly string[] playerColors = { "cyan", "yellow", "blue", "orange", "purple", "pink", "lime", "green" };

    /// <summary>
    /// Handles the Connect button click to initiate a connection to the game server.
    /// </summary>
    private void ConnectButton()
    {
        if (networkController == null)
        {
            networkController = new NetworkController(serverAddress, portNumber)
                {
                    OnError = async message =>
                    {
                        statusMessage = message;
                        await InvokeAsync(StateHasChanged); // Update the UI
                    },
                    OnDisconnected = async () =>
                    {
                        await ClearCanvasLoop();
                        await InvokeAsync(StateHasChanged); // Update the UI
                    },
                    OnStatusUpdate = async message =>
                    {
                        statusMessage = message;
                        await InvokeAsync(StateHasChanged); // Update the UI
                    }
                };
        }

        networkController.ConnectToServer(playerName);
    }

    /// <summary>
    /// Handles the Disconnect button click to stop communication with the game server.
    /// </summary>
    private async void DisconnectButton()
    {
        networkController?.DisconnectFromServer();
        networkController = null;
        await ClearCanvasLoop();
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Called after the component has been rendered to initialize the JavaScript module and start the game loop.
    /// </summary>
    /// <param name="firstRender">Indicates if this is the first time the component has been rendered.</param>
    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>( "import", "./Pages/SnakeGUI.razor.js" );
            context = await canvasReference.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>( "initRenderJS", DotNetObjectReference.Create( this ) );           

            GameLoop(); // Start the game loop
        }
    }

    /// <summary>
    /// Main game loop responsible for continuously updating and rendering the game state.
    /// </summary>
    private async void GameLoop()
    {
        while (true)
        {
            if (TheWorld != null) // Only draw when TheWorld is initialized
            {
                await DrawFrame();
            }
            await Task.Delay(20); // 50 FPS, if you wish to change the server frameRate, then you have to also change this
        }
    }

    /// <summary>
    /// Clears the canvas over a specified duration to reset the game view.
    /// </summary>
    private async Task ClearCanvasLoop()
    {
        int clearDuration = 300; // Duration in milliseconds
        int clearInterval = 100;  // Interval between clears in milliseconds
        int elapsed = 0;

        while (elapsed < clearDuration)
        {
            await ClearCanvas();
            await Task.Delay(clearInterval);
            elapsed += clearInterval;
        }
    }

    /// <summary>
    /// Clears the entire canvas.
    /// </summary>
    private async Task ClearCanvas()
    {
        if (context != null)
        {
            await context.ClearRectAsync(0, 0, ViewWidth, ViewHeight);
        }
    }

    /// <summary>
    /// Draws a single frame of the game, including players, powerups, walls, and the background.
    /// </summary>
    private async Task DrawFrame()
    {
        World? drawingCopy;

        // Lock and create a copy of TheWorld from networkController
        lock (drawingLock)
        {
            // Ensure you're referencing TheWorld from networkController
            drawingCopy = TheWorld != null ? new World(TheWorld) : null;
        }

        if (drawingCopy == null)
        {
            return;
        }

        await context.BeginBatchAsync();

        // Clip the view to avoid drawing outside the canvas
        await context.BeginPathAsync();
        await context.RectAsync(0, 0, ViewWidth, ViewHeight);
        await context.ClipAsync();

        // Save the context state before applying transformations
        await context.SaveAsync();

        // Centering based on the player's head position
        if (TheWorld?.Players != null && networkController?.playerID != null && TheWorld.Players.TryGetValue(networkController.playerID, out Player? currentPlayer))
        {
            // Get the head coordinates of the player
            double headX = currentPlayer.Body.Last().X;
            double headY = currentPlayer.Body.Last().Y;

            // Calculate offsets to center the view on the player's head
            double offsetX = -(headX - (ViewWidth / 2));
            double offsetY = -(headY - (ViewHeight / 2));

            // Center on origin and move to player's head position
            await context.TranslateAsync(ViewWidth / 2, ViewHeight / 2);
            await context.TranslateAsync(-headX, -headY);

            // Set the scale and calculate the center offset for background centering
            double largeBackgroundSize = TheWorld.Size * 1.5; // Example: 1.5x world size for a buffer

            // Draw a larger solid background to avoid empty edges
            await context.SetFillStyleAsync("black"); // Or any background color you prefer
            await context.FillRectAsync( -largeBackgroundSize / 2, -largeBackgroundSize / 2, largeBackgroundSize, largeBackgroundSize);

            // Draw the image background:
            await context.DrawImageAsync(backgroundImage, -TheWorld.Size / 2, -TheWorld.Size / 2, TheWorld.Size, TheWorld.Size);
        }

        // Draw each player in TheWorld
        foreach (var player in drawingCopy.Players.Values)
        {
            await DrawSnake(player);
        }

        // Draw each powerup in TheWorld
        foreach (var powerup in drawingCopy.Powerups.Values)
        {
            await DrawPowerup(powerup);
        }

        // Draw each wall segment
        foreach (var wall in drawingCopy.Walls.Values)
        {
            await DrawWall(wall);
        }

        // Restore the transformation matrix to the original state after drawing
        await context.RestoreAsync();

        await context.EndBatchAsync();
    }

    /// <summary>
    /// Draws a snake on the canvas based on its current state.
    /// </summary>
    /// <param name="player">The player whose snake to draw.</param>
    private async Task DrawSnake(Player player)
    {
        // Determine the snake color based on player ID or use red for dead snakes
        string color = player.Alive ? (player.ID < 8 ? playerColors[player.ID] : playerColors[player.ID % 8]) : "red";

        await context.SetStrokeStyleAsync(color);
        await context.SetFillStyleAsync(color);

        await context.SetLineWidthAsync(10); // Set line width for snake

        await context.BeginPathAsync();

        if (player.Body.Count > 0)
        {
            double startX = player.Body[0].X;
            double startY = player.Body[0].Y;
            await context.MoveToAsync(startX, startY);

            foreach (var segment in player.Body)
            {
                await context.LineToAsync(segment.X, segment.Y);
            }
        }

        await context.StrokeAsync();

        // Draw each segment as a circle
        foreach (var segment in player.Body)
        {
            await context.BeginPathAsync();
            await context.ArcAsync(segment.X, segment.Y, 5, 0, 2 * Math.PI); // Draw a circle with radius 5
            await context.FillAsync();
        }

        // Draw the player's name near the snake's head
        if (player.Body.Count > 0)
        {
            double headX = player.Body[^1].X; // Last point is the head
            double headY = player.Body[^1].Y;

            // Set font and draw the player name
            await context.SetFontAsync("12px Arial");
            await context.FillTextAsync(player.Name, headX + 10, headY - 10); // Offset the name slightly from the head
        }
    }

    /// <summary>
    /// Draws a powerup on the canvas.
    /// </summary>
    /// <param name="powerup">The powerup to draw.</param>
    private async Task DrawPowerup(Powerup powerup)
    {
        // Calculate the position to center the image
        double powerupX = powerup!.Position!.X - 8; // Center 16x16 image on position
        double powerupY = powerup.Position.Y - 8;

        // Draw the powerup image
        await context.DrawImageAsync(powerupImage, powerupX, powerupY, 16, 16);
    }

    /// <summary>
    /// Draws a wall on the canvas.
    /// </summary>
    /// <param name="wall">The wall to draw.</param>
    private async Task DrawWall(Wall wall)
    {
        // Calculate the distance between Point1 and Point2
        double deltaX = wall!.Point2!.X - wall!.Point1!.X;
        double deltaY = wall.Point2.Y - wall.Point1.Y;
        double distance = Math.Sqrt(deltaX * deltaX + deltaY * deltaY);

        // Calculate the number of 50x50 segments needed along the line
        int segmentCount = (int)(distance / 50);

        // Calculate the direction vector for each segment
        double stepX = deltaX / distance * 50;
        double stepY = deltaY / distance * 50;

        // Draw each 50x50 image segment along the line
        for (int i = 0; i < segmentCount + 1; i++)
        {
            double posX = wall.Point1.X + i * stepX - 25;
            double posY = wall.Point1.Y + i * stepY - 25;

            // Draw the wall image at each segment position
            await context.DrawImageAsync(wallImage, posX, posY, 50, 50);
        }
    }

    /// <summary>
    /// Handles key press events and sends the corresponding move command to the server.
    /// </summary>
    /// <param name="key">The key that was pressed.</param>
    [JSInvokable]
    public void HandleKeyPress(string key)
    {
        if (TheWorld == null)
        {
            return;
        }

        string direction = key switch
        {
            "w" => "up",
            "s" => "down",
            "a" => "left",
            "d" => "right",
            _ => "none"
        };

        if (direction != "none")
        {
            networkController?.SendMoveCommand(direction);
        }
    }

}

